
# Program 1

print("~~~~~~~~~~~~~~~~Program 1~~~~~~~~~~~~~~~~")

# File I/O

# Up until now, everything we’ve programmed has stored information in memory. That is, once the program is ended,
# all information gathered from the user or generated by the program is lost.

# File I/O is the ability of a program to take a file as input or create a file as output.
# To begin, in the terminal window type code names.py and code as follows:

# name = input("What's you name?")
# print(f"hello, {name}")

# Program 2

print("~~~~~~~~~~~~~~~~Program 2~~~~~~~~~~~~~~~~")

# Notice that running this code has the desired output. The user can input a name. The output is as expected.

# However, what if we wanted to allow multiple names to be inputted? How might we achieve this? Recall that a list is
# a data structure that allows us to store multiple values into a single variable. Code as follows:

# names = []

# for _ in range(3):
    # nameTwo = input("What's your name?")
    # names.append(nameTwo)


# Program 3

print("~~~~~~~~~~~~~~~~Program 3~~~~~~~~~~~~~~~~")

# Notice that the user will be prompted three times for input. The append method is used to add the name to our names
# list.

# This code could be simplified to the following:

# namesThree = []

# for _ in range(3):
    # namesThree.append(input("What's your name?"))

# Program 4

print("~~~~~~~~~~~~~~~~Program 4~~~~~~~~~~~~~~~~")


# Notice that this has the same result as the prior block of code.
# Now, let’s enable the ability to print the list of names as a sorted list. Code as follows:

# names = []

# for _ in range(3):
    # names.append(input("What's your name?"))

# for nameFour in sorted(names):
    # print(f"hello, {nameFour}")

# Notice that once this program is executed, all information is lost. File I/O allows your program to store this
# information such that it can be used later.

# You can learn more in Python’s documentation of sorted.


# Program 5

print("~~~~~~~~~~~~~~~~Program 5~~~~~~~~~~~~~~~~")

# open

# open is a functionality built into Python that allows you to open a file and utilize it in your program. The open
# function allows you to open a file such that you can read from it or write to it

# To show you how to enable file I/O in your program, let’s rewind a bit and code as follows:

# nameFive = input("What's your name? ")

# file = open("names.txt", "w")
# file.write(nameFive)
# file.close()

# Notice that the open function opens a file called names.txt with writing enabled, as signified by the w. The code
# above assigns that opened file to a variable called file. The line file.write(name) writes the name to the text
# file. The line after that closes the file.

# Testing out your code by typing python names.py, you can input a name and it saves to the text file. However, if you
# run your program multiple times using different names, you will notice that this program will entirely rewrite the
# names.txt file each time.

# Ideally, we want to be able to append each of our names to the file. Remove the existing text file by typing rm
# names.txt in the terminal window. Then, modify your code as follows:

# nameSix = input("What's your name? ")

# file = open("names.txt", "a")
# file.write(nameSix)
# file.close()


# Program 6

print("~~~~~~~~~~~~~~~~Program 6~~~~~~~~~~~~~~~~")

# Notice that the only change to our code is that the w has been changed to a for “append”. Rerunning this program
# multiple times, you will notice that names will be added to the file. However, you will notice a new problem!

# Examining your text file after running your program multiple times, you’ll notice that the names are running
# together. The names are being appended without any gaps between each of the names. You can fix this issue. Again,
# remove the existing text file by typing rm names.txt in the terminal window. Then, modify your code as follows:

# nameSeven = input("What's your name? ")
# file = open("names.txt", "a")
# file.write(f"{nameSeven}\n")
# file.close()

# Notice that the line with file.write has been modified to add a line break at the end of each name.
# This code is working quite well. However, there are ways to improve this program. It so happens that it’s quite easy
# to forget to close the file.

# You can learn more in Python’s documentation of open.

# Program 7

print("~~~~~~~~~~~~~~~~Program 7~~~~~~~~~~~~~~~~")

# with

# The keyword with allows you to automate the closing of a file.
# Modify your code as follows:

# nameEight = input("What's your name? ")

# with open("names.txt", "a") as file:
    # file.write(f"{nameEight}\n")

# Program 8

print("~~~~~~~~~~~~~~~~Program 8~~~~~~~~~~~~~~~~")

# Notice that the line below with is indented.
# Up until this point, we have been exclusively writing to a file. What if we want to read from a file. To enable this
# functionality, modify your code as follows:

with open("names.txt", "r") as file:
    lines = file.readlines()

for line in lines:
    print("hello,", line)


# Program 9

print("~~~~~~~~~~~~~~~~Program 9~~~~~~~~~~~~~~~~")

# Notice that readlines has a special ability to read all the lines of a file and store them in a file called lines.
# Running your program, you will notice that the output is quite ugly. There seem to be multiple line breaks where
# there should be only one.

# There are many approaches to fix this issue. However, here is a simple way to fix this error in our code:

# with open("names.txt", "r") as file:
    # linesTwo = file.readlines()

# for lineTwo in linesTwo:
    # print("hello,", lineTwo.strip())

# Program 10

print("~~~~~~~~~~~~~~~~Program 10~~~~~~~~~~~~~~~~")

# Notice that rstrip has the effect of removing the extraneous line break at the end of each line.
# Still, this code could be simplified even further:

with open("names.txt", "r") as file:
    for lineThree in file:
        print("hello,", lineThree.rstrip())

# Notice that running this code, it is correct. However, notice that we are not sorting the names.


# Program 11

print("~~~~~~~~~~~~~~~~Program 11~~~~~~~~~~~~~~~~")

# This code could be further improved to allow for the sorting of the names:

namesTwo = []

with open("names.txt") as file:
    for lineFour in file:
        namesTwo.append(lineFour.rstrip())

for nameNine in sorted(namesTwo):
    print(f"hello, {nameNine}")

# Notice that names is a blank list where we can collect the names. Each name is appended to the names list in memory.
# Then, each name in the sorted list in memory is printed. Running your code, you will see that the names are now
# properly sorted.










